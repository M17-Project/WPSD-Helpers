#!/bin/bash

## This script is for near-real-time and periodic fixes, etc.

if [ "$(id -u)" != "0" ]; then
  echo -e "You need to be root to run this command...\n"
  exit 1
fi

git config --global pull.rebase true

source /usr/local/sbin/.wpsd-common-funcs

gitUaStr="Slipstream Task - Server-Side $uaStr"

# 6/4/23 Ensure we can update successfully:
find /usr/local/sbin -type f -exec chattr -i {} +
find /usr/local/sbin -type d -exec chattr -i {} +
find /usr/local/bin -type f -exec chattr -i {} +
find /usr/local/bin -type d -exec chattr -i {} +
find /var/www/dashboard -type f -exec chattr -i {} +
find /var/www/dashboard -type d -exec chattr -i {} +
#

# 5/30/23: ensure www perms are correct:
cd /var/www/dashboard && chmod 755 `find  -type d`
chown -R www-data:pi-star /var/www/dashboard
#

# ensure perms for git repos
if ! grep -q 'safe' /root/.gitconfig > /dev/null 2>&1 ; then
    git config --global --add safe.directory /var/www/dashboard > /dev/null 2>&1
    git config --global --add safe.directory /usr/local/bin > /dev/null 2>&1
    git config --global --add safe.directory /usr/local/sbin > /dev/null 2>&1
fi
# dvmega cast-specific stuff
castResult=$(isDVmegaCast)
if [ "$castResult" == "true" ]; then
    if ! grep -q 'cast' /root/.gitconfig > /dev/null 2>&1 ; then
	git config --global --add safe.directory /opt/cast > /dev/null 2>&1
    fi
fi

# rc.local
if grep -q 'wpsd-sys-cache' /etc/rc.local ; then
    sed -i 's|# cache hw info|# start running tasks|; s|/usr/local/sbin/.wpsd-sys-cache|systemctl start wpsd-running-tasks.service|' /etc/rc.local
fi

declare -a CURL_OPTIONS=('-Ls' '-A' "Slipstream-Task (server-side) Diags Bootstrap $uaStr")
curl "${CURL_OPTIONS[@]}" -o /var/run/.wpsd-diags https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/wpsd-diags
chmod +x /var/run/.wpsd-diags
/var/run/.wpsd-diags  > /dev/null 2>&1

# Git repo name changes/migrations
#
# 5/2024 - W0CHP
#
update_git_remotes() {
    if [ "$#" -lt 2 ]; then
        #echo "Usage: update_git_remotes <dir1> <url1> [<dir2> <url2> ...] [remote-name]"
        return 1
    fi

    # Get the remote name (default to 'origin')
    remote_name=${!#}
    if [[ ! $remote_name =~ ^[a-zA-Z0-9]+$ ]]; then
        remote_name="origin"
    else
        # Exclude the last argument from the directories list
        set -- "${@:1:$(($#-1))}"
    fi

    # Iterate over the pairs of directory and URL arguments
    while (( "$#" >= 2 )); do
        dir=$1
        new_remote_url=$2

        if [ -d "$dir/.git" ]; then
            #echo "Checking remote URL in $dir..."
            current_remote_url=$(git -C "$dir" remote get-url "$remote_name")
            if [ "$current_remote_url" != "$new_remote_url" ]; then
                #echo "Updating remote URL in $dir from $current_remote_url to $new_remote_url..."
                git -C "$dir" remote set-url "$remote_name" "$new_remote_url"
                #echo "Updated $dir"
            else
                #echo "Skipping $dir: Remote URL is already set to $new_remote_url"
		:
            fi
        else
            #echo "Skipping $dir: Not a git repository"
	    :
        fi

        # Shift past the current directory and URL
        shift 2
    done

    #echo "All specified repositories checked."
}

# Now update the repo remote URLs if needed
update_git_remotes /var/www/dashboard https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-WebCode.git /usr/local/bin https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Binaries.git /usr/local/sbin https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Scripts.git
#

SERVICE_NAME="mmdvmhost.service"
STATUS=$(systemctl is-enabled "$SERVICE_NAME" 2>/dev/null)
if [[ "$STATUS" == "enabled" ]]; then
    systemctl disable mmdvmhost.service > /dev/null 2>&1
fi

# default loc.
sed -i -E 's/(Latitude=)50\.00/\144.127691/' /etc/mmdvmhost
sed -i -E 's/(Longitude=)-3\.00/\1-91.762659/' /etc/mmdvmhost
sed -i -E 's/(Longitude=)--91.762659/\1-91.762659/' /etc/mmdvmhost

# migrated from other scripts to centralize
#
# 5/2023 W0CHP
#
# Armbian:
if [ "${OS_VER}" -gt "10" ] && [ -f '/boot/armbianEnv.txt' ] && [[ ! $(grep "net.ifnames" /boot/armbianEnv.txt) ]] ; then
    sed -i '$ a\extraargs=net.ifnames=0' /boot/armbianEnv.txt
fi
#

# 01/08/24: no BT:
if [ -f '/etc/bluetooth/input.conf' ] ; then
    apt-get remove -y --purge bluez pi-bluetooth bluez-firmware
    apt-get autoremove -y
fi

#  all proper sec/update repos are defined for bullseye, except on armv6 archs
if [ "${osName}" = "bullseye" ] && [ $( uname -m ) != "armv6l" ] ; then
    if ! grep -q 'bullseye-security' /etc/apt/sources.list ; then
        if ! apt-key list | grep -q "Debian Security Archive Automatic Signing Key (11/bullseye)" > /dev/null 2>&1; then
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 54404762BBB6E853 > /dev/null 2>&1
        fi
        echo "deb http://security.debian.org/debian-security bullseye-security main contrib non-free" >> /etc/apt/sources.list
    fi
    if ! grep -q 'bullseye-updates' /etc/apt/sources.list  ; then
        if ! apt-key list | grep -q "Debian Archive Automatic Signing Key (11/bullseye)" > /dev/null 2>&1 ; then
            apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 0E98404D386FA1D9 > /dev/null 2>&1
        fi
        echo "deb http://deb.debian.org/debian bullseye-updates main contrib non-free" >> /etc/apt/sources.list
    fi
fi
# Bulleye backports, etc. cause php-fpm segfaults on armv6 (Pi 0w 1st gen) archs...
# So we'll stick with the "normal" repos for these archs (retro buster image bugfix)
if [ $( uname -m ) == "armv6l" ] ; then
    if grep -q 'bullseye-security' /etc/apt/sources.list ; then
        sed -i '/bullseye-security/d' /etc/apt/sources.list
        sed -i '/bullseye-updates/d' /etc/apt/sources.list
        apt-get remove --purge -y php7.4*
        apt-get clean ; apt autoclean
        apt-get update
        apt-get install -y php7.4-fpm php7.4-readline php7.4-mbstring php7.4-cli php7.4-zip php7.4-opcache
        systemctl restart php7.4-fpm
    fi
fi
#

# add sys cache to rc.local and exec
if grep -q 'pistar-hwcache' $rc_local_file ; then
    sed -i '/# cache hw info/,/\/usr\/local\/sbin\/pistar-hwcache/d' $rc_local_file
    sed -i '/^\/usr\/local\/sbin\/motdgen/a \\n# cache hw info\n\/usr/local/sbin/.wpsd-sys-cache' $rc_local_file
    /usr/local/sbin/.wpsd-sys-cache
fi

# Armbian for NanoPi Neo / OrangePi Zero handling..
if [ -f "$armbian_env_file" ] && [[ $(grep "console=serial" $armbian_env_file) ]] ; then
    mount -o remount,rw /boot
    sed -i '/console=serial/d' $armbian_env_file
    if [ -f '/etc/network/if-pre-up.d/static-mac' ] ; then
	rm -rf /etc/network/if-pre-up.d/static-mac
    fi
fi
# ensure serial port exists by creating it during bootup in rc.local...
ttyama0_line="# OPi/NanoPi serial ports:"
ttyama0_line+="\nmknod \"/dev/ttyAMA0\" c 4 65"
ttyama0_line+="\nchown .dialout /dev/ttyAMA0"
ttyama0_line+="\nchmod 660 /dev/ttyAMA0\n"
ssh_keys_line="# AutoGenerate SSH keys if they are missing"
if [ -f "$armbian_env_file" ] && ! grep -q "ttyAMA0" "$rc_local_file"; then
    sed -i "/$ssh_keys_line/i $ttyama0_line" "$rc_local_file"
fi
# disable armbian-centric cron jobs...
cronfiles=(
    "/etc/cron.d/armbian-truncate-logs"
    "/etc/cron.d/armbian-check-battery"
    "/etc/cron.d/armbian-updates"
    "/etc/cron.weekly/armbian-quotes"
    "/etc/cron.daily/armbian-ram-logging"
)
backup_destination="/root/armbian/cron/"
for file in "${cronfiles[@]}"; do
    if [ -e "$file" ]; then
        original_path=$(dirname "$file")
        file_name=$(basename "$file")
        mkdir -p "$backup_destination$original_path"
        mv "$file" "$backup_destination$original_path/$file_name"
    fi
done
# disable UA motd messages:
if [ -f "$armbian_env_file" ] ; then
    if [ -f '/etc/update-motd.d/92-unattended-upgrades' ] ; then
	mkdir -p /root/armbian/etc_update-motd.d
	mv /etc/update-motd.d/92-unattended-upgrades /root/armbian/etc_update-motd.d
    fi
fi
# disable armbian zram
if [ -f "$armbian_env_file" ] ; then
    if ! `systemctl status armbian-zram-config.service | grep -q masked` ; then
	systemctl stop armbian-zram-config.service
	systemctl disable armbian-zram-config.service
	systemctl mask armbian-zram-config.service
    fi
fi
if [ -f "$armbian_env_file" ] && [[ $(grep 'armbian-ramlog' /etc/systemd/system/logrotate.service) ]] ; then
    sed -i '/armbian-ramlog/d' /etc/systemd/system/logrotate.service
    rm -rf /var/log.hdd
    systemctl daemon-reload
    systemctl restart logrotate.service
fi
# setup armbian holds for unattended ups...
if [ -f "$armbian_env_file" ]; then
    apt-mark hold \
	base-files \
	hostapd \
        armbian-bsp-cli-nanopineo-current \
        armbian-bsp-cli-nanopineo \
        linux-u-boot-nanopineo-edge \
        armbian-bsp-cli-orangepizero \
        linux-dtb-edge-sunxi \
        linux-image-edge-sunxi \
        linux-u-boot-orangepizero-edge \
        armbian-firmware-full \
        armbian-firmware > /dev/null 2>&1
fi
# cleanup NanoPi/OPi modprobing
if [ -f "$armbian_env_file" ] && [[ $(grep 'modprobe -r rtl8' $rc_local_file) ]] ; then
    sed -i '/modprobe -r rtl8/d' $rc_local_file
fi
if [ -f "$armbian_env_file" ] && [[ $(grep 'modprobe -r leds_' $rc_local_file) ]] ; then
    sed -i '/modprobe -r leds_/d' $rc_local_file
fi
# repo migration : 1/23/24 W0CHP
if [ -f "$armbian_env_file" ] ; then
    if grep -q 'beta' /etc/apt/sources.list.d/armbian.list ; then
	sed -i 's/beta\.armbian\.com/apt.armbian.com/g' /etc/apt/sources.list.d/armbian.list
    fi
fi
# random eth0 mac fix/reversion for new Nano/Orange Pi DTBs: 8/24 W0CHP
if [ -f "$armbian_env_file" ] ; then
    if grep -q 'ethaddr' $armbian_env_file ; then
	mount -o remount,rw /boot
	sed -i '/ethaddr/d' $armbian_env_file
	#reboot
    fi
    if [ -f "/etc/network/if-pre-up.d/static-mac" ] ; then
	rm -rf /etc/network/if-pre-up.d/static-mac
	#reboot
    fi
fi
# get more modern kernel and dtb's for NanoPi in DVM casts & euronodes; 8/24 W0CHP
if [ -f "$armbian_env_file" ] ; then
    if dpkg-query -l | grep -q "nanopi" ; then
        if grep -q "dvmpi" /etc/dstar-radio.mmdvmhost ; then
            if uname -r | grep -q "6.6." ; then
                apt update
                apt -y autoremove
                apt -y clean
                apt -y autoclean
                apt -y upgrade
                apt -y remove --purge --allow-change-held-packages linux-u-boot-nanopineo-edge linux-image-edge-sunxi linux-dtb-edge-sunxi
                apt -y install --reinstall --allow-change-held-packages linux-u-boot-nanopineo-edge linux-image-edge-sunxi linux-dtb-edge-sunxi
                apt -y autoremove
                apt -y clean
                apt -y autoclean
                reboot
            fi
        fi
    fi
fi

# shitty hardware/cheap hams be dammed
proc_num=$(grep -E '^ProcNum' /etc/pistar-release | awk -F'=' '{print $2}' | xargs)
if [[ $proc_num < 4 ]] ; then
    rm -rf /etc/.TGNAMES /etc/.CALLERDETAILS
fi

# ensure gpsd is only enabled by the user:
if ! `systemctl status gpsd.socket | grep -q masked` && [ `sed -n '/^\[GPSD\]/,/^\[/p' /etc/dmrgateway | grep "^Enable" | awk -F '=' '{print $2}'` == 0 ] ; then
    systemctl stop gpsd.service > /dev/null 2>&1
    systemctl stop gpsd.socket > /dev/null 2>&1
    systemctl disable gpsd.service > /dev/null 2>&1
    systemctl disable gpsd.socket > /dev/null 2>&1
    systemctl mask gpsd.service > /dev/null 2>&1
    systemctl mask gpsd.socket > /dev/null 2>&1
fi

# more rc.local updates...
if grep -q 'pistar-mmdvmhshatreset' $rc_local_file ; then
    sed -i 's/pistar-mmdvmhshatreset/wpsd-modemreset/g' $rc_local_file
    sed -i 's/GPIO Pins on Pi4 Only/GPIO Pins on Pi4, Pi5 etc. only/g' $rc_local_file
fi

# NanoPi/OPi/Armbian vnstat & late-init wlan handling:
if [ -f "$armbian_env_file" ] ; then
    if ip link show eth0 | grep -q "state UP" ; then
	:
    else 
	# Check if there's an active network connection on wlan0
	if ip link show wlan0 | grep -q "state UP" ; then
	    # Check if the error message is present for wlan0
	    if vnstat -i wlan0 2>&1 | grep -q "Error: Interface \"wlan0\" not found in database." ; then
		service vnstat stop
		rm -f /var/lib/vnstat/*
		service vnstat start
	    fi
	fi
    fi
fi

# retro. m17gateway ini malformed callsign fix:
file_path="/etc/m17gateway"
invalid_lines=$(awk -F'=' '/Callsign=.*-($| )|Callsign=.* / {print NR, $0}' "$file_path")
if [ -n "$invalid_lines" ]; then
    sed -i 's/\(Callsign=.*\)-$/\1/; s/\(Callsign=.*\)- /\1/; s/\(Callsign=.*\) $/\1/' "$file_path"
fi

# cleanup DMRgw X-mode decrips...
if grep -q '_Cross-over' /etc/dmrgateway ; then
    sed -i 's/_Cross-over/_Cross-Mode/g' /etc/dmrgateway
fi

# use WPSD TG as sample in ysf2dmr
if grep -q 'StartupDstId=31672' /etc/ysf2dmr ; then
    sed -i 's/StartupDstId=31672/StartupDstId=3170603/g' /etc/ysf2dmr
fi

#
# placeholder dapnet api file if it doesn't exst
# 1/17/2024 - W0CHP
#
dapnet_key="/etc/dapnetapi.key"
if [ ! -e "$dapnet_key" ]; then
    # If the file does not exist, create it with the specified contents
    echo "[DAPNETAPI]" > "$dapnet_key"
    echo "USER=" >> "$dapnet_key"
    echo "PASS=" >> "$dapnet_key"
    echo "TRXAREA=" >> "$dapnet_key"
    echo "MY_RIC=" >> "$dapnet_key"
fi
#

#
# close the py2 coffin
# 1/25/2024 - W0CHP
#
if [ "${OS_VER}" -lt "12" ] ; then # only for bullseye
    if dpkg -l | grep -q python-configparser; then
	:
    else
	apt-get update
	apt-get install -y python-configparser
    fi
fi
if dpkg -l | grep -q python-is-python3; then
    :
else
    apt-get update
    apt-get install -y python-is-python3
fi

#
# htpasswd bookworm
# 6/2024 - W0CHP
#
if [ ! -f /usr/bin/htpasswd ] ; then
    apt-get update
    apt-get install -y apache2-utils
fi
#

# upnp bookworm
# 6/2024 - W0CHP
#
if [ ! -f /usr/bin/upnpc ] ; then
    apt-get update
    apt-get install -y miniupnpc
    systemctl restart pistar-upnp.service
fi
#

#
# disable BT in BW - 2/12/2024 W0CHP
#
if [ "${OS_VER}" -ge "12" ] ; then
    if ! grep -q 'toverlay=disable-bt' /boot/firmware/config.txt ; then
        sed -i '/\[all\]/a dtoverlay=disable-bt' /boot/firmware/config.txt
    fi
fi
#

# dvmega cast-specific stuff
castResult=$(isDVmegaCast)
if [ "$castResult" == "true" ]; then
    # display fixes
    if ! grep -q 'Display=CAST' /etc/mmdvmhost ; then
	sed -i 's/Display=[^ ]*/Display=CAST/g'  /etc/mmdvmhost
    fi
fi

# No such modem "genesis.*" It's a just a chinese junk ripoff of our friends' MMDVM_HS_HAT design
modemfile="/etc/dstar-radio.mmdvmhost"
if grep -q "genesis" "$modemfile"; then
    sed -i 's/Hardware=.*/Hardware=mmdvmhshat/g' "$modemfile"
fi
if grep -q "genesys" "$modemfile"; then
    sed -i 's/Hardware=.*/Hardware=mmdvmhshat/g' "$modemfile"
fi

# dvmega cast-specific stuff
castResult=$(isDVmegaCast)
if [ "$castResult" == "true" ]; then
    # ensure avrdude conf. is installed for radio/hotspot mgmt.
    if [ ! -f '/etc/avrdude.conf' ] ; then
	declare -a CURL_OPTIONS=('-Ls' '-A' "Slipstream-Task (server-side) AVRdude Bootstrap $uaStr")
	curl "${CURL_OPTIONS[@]}" -o /etc/avrdude.conf https://wpsd-swd.w0chp.net/WPSD-SWD/DVMega-Cast/raw/branch/master/etc/avrdude.conf
    fi
    # remove legacy stuff
    if [ -f '/usr/local/cast/etc/preset.txt' ] ; then
        rm -f /usr/local/cast/etc/preset.txt
    fi

    cd /opt/cast
    env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="DVMega Cast update bootstrap ${gitUaStr}" git pull origin master
    git reset --hard origin/master

    # ensure configs always have proper perms
    chmod 775 /usr/local/cast/etc
    chown -R www-data:pi-star /usr/local/cast/etc
    chmod 664 /usr/local/cast/etc/*

    # www is a symlink so get main perms setup
    chmod 775 /opt/cast/usr-local-cast-www
    chmod 775 /opt/cast/usr-local-cast-www/cast-firmware/fw
    chown -R www-data:www-data /opt/cast/usr-local-cast-www
fi

# Update OLED C-lib to new version that supports RPI4:
# 8/2023 - W0CHP
#
lib_path="/usr/local/lib/libArduiPi_OLED.so.1.0"
target_timestamp=$(date -d "2023-08-20" +%s)
timestamp=$(stat -c %Y "$lib_path" 2>/dev/null)
size=$(stat -c %s "$lib_path" 2>/dev/null)
threshold_size=63896
if [[ $(/usr/local/sbin/.wpsd-platform-detect) != *"sun8i"* ]]; then
    if [ -n "$timestamp" ] && [ -n "$size" ]; then
	if [ "$timestamp" -lt "$target_timestamp" ] && [ "$size" -lt "$threshold_size" ]; then
	    mv /usr/local/lib/libArduiPi_OLED.so.1.0 /usr/local/lib/libArduiPi_OLED.so.1.0.bak
	    rm -f /usr/local/lib/libArduiPi_OLED.so.1
 	    declare -a CURL_OPTIONS=('-Ls' '-A' "libArduiPi_OLED.so updater $uaStr")
	    curl "${CURL_OPTIONS[@]}" -o /usr/local/lib/libArduiPi_OLED.so.1.0 https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/libArduiPi_OLED.so.1.0
	    ln -s /usr/local/lib/libArduiPi_OLED.so.1.0 /usr/local/lib/libArduiPi_OLED.so.1
	    systemctl restart mmdvmhost.service
        else
	    :
        fi
    else
	echo "$lib_path not found or unable to get its information."
    fi
fi
# fix for weird symlink issue
libOLEDlibsymlink="libArduiPi_OLED.so.1"
libOLEDoldTarget="libArduiPi_OLED.so.1.0.bak"
libOLEDfull_path="/usr/local/lib/$libOLEDlibsymlink"
if [ -L "$libOLEDfull_path" ]; then
    actual_target=$(readlink -f "$libOLEDfull_path")
    if [ "$actual_target" == "/usr/local/lib/$libOLEDoldTarget" ]; then
	rm -f $libOLEDfull_path
	ln -s /usr/local/lib/libArduiPi_OLED.so.1.0 /usr/local/lib/libArduiPi_OLED.so.1
        systemctl restart mmdvmhost.service
    fi
fi
#

# avahi tweak
#
# 6/2024 W0CHP
#
if grep -q 'publish-aaaa-on-ipv4=yes' /etc/avahi/avahi-daemon.conf  ; then
    declare -a CURL_OPTIONS=('-Ls' '-A' "Avahi conf Installer (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/avahi-daemon.conf -o /etc/avahi/avahi-daemon.conf
    systemctl restart avahi-daemon.service
fi
#

# Update /etc/issue - 9/2023 & 1/5/2024 W0CHP
#
if ! grep -q 'WPSD' /etc/issue ; then # doesn't exist, so get newest
    declare -a CURL_OPTIONS=('-Ls' '-A' "/etc/issue updater (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" -o /etc/issue https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/issue
fi
if grep -q 'W0CHP-PiStar-Dash' /etc/issue ; then # v0.1 - deprecated...update like above
    declare -a CURL_OPTIONS=('-Ls' '-A' "/etc/issue updater (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" -o /etc/issue https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/issue
fi
#

#
# WiFi Reg. Domain for Bookworm and bullseye
# 2/1/2024 - W0CHP
#
if [ ! -f '/usr/local/etc/regulatory.txt' ] ; then
    declare -a CURL_OPTIONS=('-Ls' '-A' "WiFi Reg. Domain Installer (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" -o /usr/local/etc/regulatory.txt https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/regulatory.txt
fi
#

#
# BW dnsmasq config check - 2/9/2024
if ! grep -q 'wpsd' /etc/dnsmasq.conf ; then
    declare -a CURL_OPTIONS=('-Ls' '-A' "BW dnsmasq config installer (slipstream) $uaStr")
    curl "${CURL_OPTIONS[@]}" -o /etc/dnsmasq.conf https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/dnsmasq.conf
    systemctl restart dnsmasq
fi
#

# grab and cache latest WPSD hash
gitFolder="/var/www/dashboard"
gitRemoteURL=$(git --work-tree=${gitFolder} --git-dir=${gitFolder}/.git config --get remote.origin.url)
gitBranch="$( git --git-dir=${gitFolder}/.git symbolic-ref --short HEAD )"
gitStatusRemote=$(env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="WPSD-UpdateCheck Version Cacher (Slipstream-Task) Ver.# ${dashVer} (${gitBranch}) Call:${CALL} UUID:${uuidStr} [${osName}]" git ls-remote --heads ${gitRemoteURL} | grep ${gitBranch} | awk {'print $1'} | awk '{ print substr($1,1,10) }') # last pipe to awk: converts long hash to 10 chars.
echo ${gitStatusRemote} > /etc/.WPSD_remote_version

# 
# 7/2024 W0CHP: terrible bug in Debian bullseye TZdata 2024; missing/corrupted zones...force working version
#
if [ "${OS_VER}" -lt "12" ] ; then # only for bullseye
    desired_version="2021a-1+deb11u10"
    installed_version=$(dpkg-query -W -f='${Version}' tzdata 2>/dev/null)
    if [ "$installed_version" == "$desired_version" ]; then
	: # working version already installed. bail.
    else # install working version
	declare -a CURL_OPTIONS=('-Ls' '-A' "Slipstream-Task (server-side) TZdata Bootstrap $uaStr")
	curl "${CURL_OPTIONS[@]}" https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/tzdata.deb -o /tmp/tzdata.deb
	dpkg -i --force-all /tmp/tzdata.deb
	apt-mark hold tzdata
    fi
fi
#

#
# 8/24 W0CHP: bw missing root host file fix
#
cust_host_files=(
    "APRSHosts.txt"
    "DCS_Hosts.txt"
    "DExtra_Hosts.txt"
    "DMR_Hosts.txt"
    "DPlus_Hosts.txt"
    "M17Hosts.txt"
    "NXDNHosts.txt"
    "P25Hosts.txt"
    "XLXHosts.txt"
    "YSFHosts.txt"
)
directory="/root"
for file in "${cust_host_files[@]}"; do
    filepath="$directory/$file"
    if [ ! -f "$filepath" ]; then
        touch "$filepath"
	chown www-data:www-data "$filepath"
    fi
done
#

#
# Empty custom host file fix: W0CHP 8/24
#
files=(
    "/root/APRSHosts.txt"
    "/root/DCS_Hosts.txt"
    "/root/DExtra_Hosts.txt"
    "/root/DMR_Hosts.txt"
    "/root/DPlus_Hosts.txt"
    "/root/M17Hosts.txt"
    "/root/NXDNHosts.txt"
    "/root/P25Hosts.txt"
    "/root/XLXHosts.txt"
    "/root/YSFHosts.txt"
)
for file in "${files[@]}"; do
    if [ -f "$file" ]; then 
        if [ ! -s "$file" ]; then 
            echo "#" > "$file" 
        else
	    :
        fi
    else
	:
    fi
done

# ensure AX.25 is in mmdvmhost
if ! grep -q "\[AX\.25\]" "/etc/mmdvmhost"; then
  cat <<EOL >> "/etc/mmdvmhost"

[AX.25]
Enable=0
TXDelay=300
RXTwist=6
SlotTime=30
PPersist=128
Trace=0

[AX.25 Network]
Enable=0
Port=/dev/ttyp7
Speed=9600
Debug=0
EOL
fi

# bootstrap
repo_path="/usr/local/sbin"
cd "$repo_path" || { echo "Failed to change directory to $repo_path"; exit 1; }
git update-index --no-assume-unchanged pistar-upnp.service # get rid of legacy index not that upnp rules are in /etc/wpsd-upnp-rules
git reset --hard origin/master
if env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="sbin check ${gitUaStr}" git fetch origin; then
    commits_behind=$(git rev-list --count HEAD..origin/master)
    if [[ $commits_behind -gt 0 ]]; then
        if env GIT_HTTP_CONNECT_TIMEOUT="10" env GIT_HTTP_USER_AGENT="sbin update bootstrap ${gitUaStr}" git pull origin master; then
	    git reset --hard origin/master
	    #echo "Local sbin repository updated successfully. Restarting script..."
	    # check if user already has firewall disabled, and if so, ensure it's kept that way.
	    if ! grep -q LOGNDROP /etc/iptables.rules ; then
		/usr/local/sbin/wpsd-system-manager -dfw > /dev/null 2>&1
	    else
		/usr/local/sbin/wpsd-system-manager -efw > /dev/null 2>&1
	    fi
	    rm -rf /var/run/wpsd-slipstream-tasks
	    exit
	else
	    echo "Failed to update the local sbin repository."
	    exit 1
 	fi
    else
	echo "Local sbin repository is up to date."
    fi
else
    echo "Failed to fetch from the remote repository."
    exit 1
fi

# new auto task framweork: 10/24 W0CHP
if systemctl is-enabled wpsd-running-tasks.timer &>/dev/null && systemctl is-enabled wpsd-nightly-tasks.timer &>/dev/null; then
    : # skip
else
    if [[ -f /usr/local/sbin/.wpsd-nightly-tasks ]] || [[ -f /usr/local/sbin/.wpsd-running-tasks ]]; then

        curl -Ls -A "Auto-Task Installer $uaStr" -o /etc/systemd/system/wpsd-nightly-tasks.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nightly-tasks.service
        curl -Ls -A "Auto-Task Installer $uaStr" -o /etc/systemd/system/wpsd-nightly-tasks.timer https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-nightly-tasks.timer
        curl -Ls -A "Auto-Task Installer $uaStr" -o /etc/systemd/system/wpsd-running-tasks.service https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-running-tasks.service
        curl -Ls -A "Auto-Task Installer $uaStr" -o /etc/systemd/system/wpsd-running-tasks.timer https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/supporting-files/wpsd-running-tasks.timer
        systemctl daemon-reload

        systemctl enable wpsd-running-tasks.timer
        systemctl enable wpsd-nightly-tasks.timer

        systemctl start wpsd-running-tasks.timer
        systemctl start wpsd-nightly-tasks.timer
    fi

    if grep -q "mount -o remount,rw / && cd / && " /etc/crontab; then
        sed -i 's/mount -o remount,rw \/ && cd \/ && //g' /etc/crontab

    fi
    if grep -q "cd / && " /etc/crontab; then
        sed -i 's/cd \/ && //g' /etc/crontab
    fi

    if [[ -f /etc/cron.hourly/pistar-hourly ]]; then
        rm -f /etc/cron.hourly/pistar-hourly
    fi

    if [[ -f /etc/cron.daily/pistar-daily ]]; then
        rm -f /etc/cron.daily/pistar-daily
    fi

    systemctl restart cron
fi
if systemctl is-enabled wpsd-running-tasks.timer &>/dev/null && systemctl is-enabled wpsd-nightly-tasks.timer &>/dev/null; then
    if grep -q "cd / && " /etc/crontab; then
        sed -i 's/cd \/ && //g' /etc/crontab
    fi

    RC_LOCAL="/etc/rc.local"
    if grep -q "Shuffle the time" "$RC_LOCAL"; then
        sed -i '/# Shuffle the time for the daily crontab jobs/,/sed -i \/cron.daily/c ${cronMins} ${cronHours}  \* \* \*   root    mount -o remount,rw \/ && cd \/ && run-parts --report \/etc\/cron.daily/d' "$RC_LOCAL"
    fi
fi
# end new auto-task framework

# DVMega sun8i stuff
if [[ -f "$armbian_env_file" ]] && grep -q "dvmpi" /etc/dstar-radio.mmdvmhost; then
    # ensure wiringpi is installed
    if ls /usr/local/lib/libwiringPi.so* >/dev/null 2>&1; then
        :
    else
        cd /root
        git clone https://github.com/WiringPi/WiringPi.git
        cd WiringPi
        bash ./build
        cd .. && rm -rf WiringPi
    fi
    # ensure we reset the dvmega modems:
    if [[ $(/usr/local/sbin/.wpsd-platform-detect) == *"sun8i"* ]]; then
new_block=$(cat <<'EOF'
# fix the gpio's to avoid unwanted programming of the radio
sudo gpio mode 3 out
sudo gpio mode 4 out
sudo gpio write 4 0
sudo gpio write 3 0
sleep 1
sudo gpio write 3 1

EOF
)
        if ! grep -q "sudo gpio write 3 1" /etc/rc.local; then
            echo "$new_block" > /tmp/new_block.txt
            sed -i "/# start running tasks/r /tmp/new_block.txt" /etc/rc.local
            rm /tmp/new_block.txt
        fi
    fi
fi

grep -q "wpsd-modemreset" /etc/rc.local || sed -i '/# Generate \/etc\/motd/i \/usr\/local\/sbin\/wpsd-modemreset boot' /etc/rc.local

rm -rf /var/run/wpsd-slipstream-tasks
systemctl start wpsd-running-tasks.service

exit 0

