#!/bin/bash

# vars
if [ ! -f '/etc/WPSD-release' ] ; then
    release_file="/etc/pistar-release"
else
    release_file="/etc/WPSD-release"
fi
CALL=$( grep "Callsign" "$release_file" | awk '{print $3}' )
osName=$( lsb_release -cs )
gitBranch=$(git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git branch | grep '*' | cut -f2 -d ' ')
dashVer=$( git --work-tree=/var/www/dashboard --git-dir=/var/www/dashboard/.git rev-parse --short=10 ${gitBranch} )
UUID=$( grep "UUID" "$release_file" | awk '{print $3}' )
uuidStr=$(egrep 'UUID' "$release_file" | awk {'print $3'})
hwDeetz=$( /usr/local/sbin/.wpsd-platform-detect )
modem=$(grep '^ModemFW\s*=\s*.*' "$release_file" | sed 's/ModemFW = //g')
modemType=$(grep '^ModemType\s*=\s*.*' "$release_file" | sed 's/ModemType = //g')
uaStr="Server-Side Exec: WPSD-BG-Bootstrap-Task Ver.# ${dashVer} Call:${CALL} UUID:${uuidStr} [${osName} Modem: ${modem} ${modemType}]"

EXCLUDED_CALLS=("W0CHP" "M1ABC" "N0CALL" "NOCALL" "PE1XYZ" "PE1ABC" "")
FOUND_MATCH=""

if [[ " ${EXCLUDED_CALLS[@]} " =~ " ${CALL} " ]]; then
    :
else
    if grep -q -ri -- '-cron' /usr/local/sbin; then
        FOUND_MATCH="Matched: '-cron' in /usr/local/sbin"
    elif grep -q -r 'hwDeetz' /usr/local/sbin; then
        FOUND_MATCH="Matched: 'hwDeetz' in /usr/local/sbin/.wpsd-common-funcs"
    elif grep -q -r 'ConnCheck' /usr/local/sbin/wpsd-hostfile-update; then
        FOUND_MATCH="Matched: 'ConnCheck' in /usr/local/sbin/wpsd-hostfile-update"
    elif grep -q 'pistar-css-W0CHP.ini' /var/www/dashboard/css/css-base.php; then
        FOUND_MATCH="Matched: 'pistar-css-W0CHP.ini' in /var/www/dashboard/css/css-base.php"
    elif [ -f '/usr/local/sbin/.wpsd-diags' ]; then
        FOUND_MATCH="Matched: Legacy Diags"
    fi

    if [[ -n "$FOUND_MATCH" ]]; then
        curl -Ls -A "PH00 reset ${uaStr} ${FOUND_MATCH}" https://wpsd-swd.w0chp.net/WPSD-SWD/WPSD-Helpers/raw/branch/master/reset-wpsd-sbin | sudo bash
        cd /var/www/dashboard && sudo git reset --hard origin/master
	sudo /usr/local/sbin/.wpsd-slipstream-tasks > /dev/null 2>&1
    fi
fi

TIMERS=("wpsd-running-tasks.timer" "wpsd-nightly-tasks.timer")
for TIMER in "${TIMERS[@]}"; do
    if ! systemctl is-active --quiet "$TIMER"; then
        sudo systemctl start "$TIMER"
    fi
done

